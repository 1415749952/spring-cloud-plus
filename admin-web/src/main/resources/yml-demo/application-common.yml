spring:
  cloud:
    alibaba:
      seata:
        tx-service-group: ${spring.application.name}
    # nacos-配置
    nacos:
      # 配置中心
      config:
        # 是否开启配置中心，默认true
        enabled: true
        server-addr: xxx:8848
        file-extension: yaml
        encode: UTF-8
        # 命名空间的id
        namespace: xxx
        group: xx
        ext-config[0]:
          data-id: common-${spring.profiles.active}.yaml
          group:  ${spring.cloud.nacos.config.group}
          refresh: true
      # 注册发现中心
      discovery:
        # 是否开启注册中心，默认true
        enabled: true
        group: ${spring.cloud.nacos.config.group}
        # 默认应用名
        service: ${spring.application.name}
        server-addr: ${spring.cloud.nacos.config.server-addr}
        namespace: ${spring.cloud.nacos.config.namespace}

    #  sentinel 流控
    sentinel:
      # 是否开启sentinel
      enabled: true
      # 取消Sentinel控制台懒加载
      eager: true
      # 控制台地址
      transport:
        dashboard: xxx:9090
      #  持久化数据库-nacos
      datasource:
        # 限流
        flow:
          nacos:
            dataId: ${spring.application.name}-${spring.profiles.active}-sentinel-flow.json
            groupId: ${spring.cloud.nacos.config.group}
            data-type: json
            # 规则
            ruleType: flow
            server-addr: ${spring.cloud.nacos.config.server-addr}
            namespace: ${spring.cloud.nacos.config.namespace}
        # 熔断降级
        degrade:
          nacos:
            dataId: ${spring.application.name}-${spring.profiles.active}-sentinel-degrade.json
            groupId: ${spring.cloud.nacos.config.group}
            data-type: json
            # 规则
            ruleType: degrade
            server-addr: ${spring.cloud.nacos.config.server-addr}
            namespace: ${spring.cloud.nacos.config.namespace}
        # 系统保护
        system:
          nacos:
            dataId: ${spring.application.name}-${spring.profiles.active}-sentinel-system.json
            groupId: ${spring.cloud.nacos.config.group}
            data-type: json
            # 规则
            ruleType: system
            server-addr: ${spring.cloud.nacos.config.server-addr}
            namespace: ${spring.cloud.nacos.config.namespace}
        # 授权
        authority:
          nacos:
            dataId: ${spring.application.name}-${spring.profiles.active}-sentinel-authority.json
            groupId: ${spring.cloud.nacos.config.group}
            data-type: json
            # 规则
            ruleType: authority
            server-addr: ${spring.cloud.nacos.config.server-addr}
            namespace: ${spring.cloud.nacos.config.namespace}
        # 热点
        hot:
          nacos:
            dataId: ${spring.application.name}-${spring.profiles.active}-sentinel-hot.json
            groupId: ${spring.cloud.nacos.config.group}
            data-type: json
            # 规则
            ruleType: param_flow
            server-addr: ${spring.cloud.nacos.config.server-addr}
            namespace: ${spring.cloud.nacos.config.namespace}

  # flyway配置
  flyway:
    enabled: true
    baselineOnMigrate: true  # 设置为true，当迁移发现数据库非空且存在没有元数据的表时，自动执行基准迁移
    locations: classpath:/db/ #可以配置多个值

    # 排除原生Druid的快速配置类
  autoconfigure:
    exclude: com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure
  # mvc
  mvc:
    throw-exception-if-no-handler-found: true
    resources.add-mappings: false
    static-path-pattern: /**
    async:
      request-timeout: 60000 # 设置接口超时时间60s
  http:
    encoding:
      force: true
      enabled: true
      charset: UTF-8
  jackson:
    date-format: yyyy-MM-dd HH:mm:ss
    time-zone: GMT+8
    default-property-inclusion: NON_NULL #not_null如果有null默认过滤
  session:
    store-type: redis
  # 数据库配置
  datasource:
    druid:
      # 访问地址：http://localhost:8088/hu/druid/index.html
      stat-view-servlet:
        loginUsername: admin
        loginPassword: 123456
    dynamic:
      primary: master #设置默认的数据源或者数据源组,默认值即为master
      # druid
      druid:
        # 初始化时建立物理连接的个数
        initial-size: 5
        # 获取连接时最大等待时间，单位毫秒
        max-wait: 60000
        # 最小连接池数量
        min-idle: 1
        # 最大连接池数量
        max-active: 20
        # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
        time-between-eviction-runs-millis: 60000
        # 配置一个连接在池中最小生存的时间，单位是毫秒
        min-evictable-idle-time-millis: 300000
        validation-query: select 1 FROM DUAL
        test-while-idle: true
        test-on-borrow: false
        test-on-return: false
        # 打开PSCache，并且指定每个连接上PSCache的大小
        pool-prepared-statements: true
        max-open-prepared-statements: 50
        max-pool-prepared-statement-per-connection-size: 20
        filter:
          # 打开mergeSql功能；慢SQL记录
          stat:
            log-slow-sql: true
            merge-sql: true
            slow-sql-millis: 5000
        #  配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
        filters: stat,wall,logback,config
  # thymeleaf
  thymeleaf:
    prefix: classpath:/templates/
    check-template-location: true
    suffix: .html
    encoding: UTF-8
    mode: HTML
    cache: false
    servlet:
      content-type: text/html
  # 静态资源映射
  resources:
    static-locations: classpath:/static/
  # 邮件
  mail:
    host: smtp.163.com
    username: xxx
    # 客户端授权码不是邮箱密码
    password: xxx
    senderName: xxx
    port: 25
    protocol: smtp
    default-encoding: UTF-8
    properties:
      mail.smtp.auth: true
      mail.smtp.ssl.enable: true
      mail.smtp.starttls.enable: true
      mail.smtp.starttls.required: true
      mail.smtp.socketFactory.port: 465
      mail.smtp.socketFactory.class: javax.net.ssl.SSLSocketFactory
      mail.smtp.socketFactory.fallback: false
  # 工作流
  activiti:
    # 自动部署验证设置:
    # true（默认）自动部署流程
    # false 不自动部署，需要手动部署发布流程
    check-process-definitions: true
    # 可选值为: false,true,create-drop,drop-create
    # 默认为true。为true表示activiti会对数据库中的表进行更新操作，如果不存在，则进行创建。
    database-schema-update: true

  # quartz定时任务
  quartz:
    jdbc:
      # 初始化Quartz表结构,项目第一次启动配置程always,然后改成never 否则已生成的job会被初始化掉
      initialize-schema: never
    #设置quartz任务的数据持久化方式，默认是内存方式
    job-store-type: jdbc
    properties:
      org:
        quartz:
          scheduler:
            instanceName: etlCleanScheduler
            instanceId: AUTO
          jobStore:
            class: org.quartz.impl.jdbcjobstore.JobStoreTX
            driverDelegateClass: org.quartz.impl.jdbcjobstore.StdJDBCDelegate
            tablePrefix: QRTZ_  #Quartz表前缀
            isClustered: true
            clusterCheckinInterval: 10000
            useProperties: false
          threadPool:
            class: org.quartz.simpl.SimpleThreadPool
            #线程数 一个任务使用一个线程
            threadCount: 100
            threadPriority: 5
            threadsInheritContextClassLoaderOfInitializingThread: true

# websocket
netty-websocket:
  port: 8090

ribbon:
  eager-load:
    enabled: true #开启饥饿加载
    clients: gourdsub,admin #为哪些服务的名称开启饥饿加载,多个用逗号分隔
  MaxAutoRetries: 1  #最大重试次数，当注册中心中可以找到服务，但是服务连不上时将会重试
  MaxAutoRetriesNextServer: 1  #切换实例的重试次数
  OkToRetryOnAllOperations: false  #对所有操作请求都进行重试，如果是get则可以，如果是post，put等操作没有实现幂等的情况下是很危险的,所以设置为false
  ConnectTimeout: 10000 #请求连接的超时时间
  ReadTimeout: 20000 #请求处理的超时时间

# feign 配置
feign:
  httpclient:
    enabled: false
  okhttp:
    enabled: true
  client:
    config:
      default:
        # 连接超时时间5s
        connectTimeout: 5000
        # 接口超时时间60s
        readTimeout: 60000
  # 开启feign的熔断功能
  sentinel:
    enabled: true

management:
  health:
    #邮箱
    mail:
      enabled: false
  endpoints:
    health:
      show-details: always
    web:
      exposure:
        include: '*'

  #MyBatisPlus
  #文档： https://mp.baomidou.com/config/#%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE
mybatis-plus:
  mapper-locations: classpath*:/mapper/*.xml
  type-aliases-package: com.gourd.hu
  type-aliases-super-type: xxx
  type-handlers-package: xxx
  scripting-language-driver:
  global-config:
    banner: false # 关闭打印mybatis-plus的LOGO
    db-config:
      logic-delete-value: 1 # 逻辑已删除值(默认为 1)
      logic-not-delete-value: 0 # 逻辑未删除值(默认为 0)

# kaptcha 图形验证码
kaptcha:
  height: 50
  width: 200
  content:
    length: 4
    source: abcdefghjklmnopqrstuvwxyz23456789
    space: 2
  font:
    color: black
    name: Arial
    size: 40
  background-color:
    from: lightGray
    to: white
  border:
    enabled: true
    color: black
    thickness: 1

# 鉴权
auth:
  # JWT
  jwt:
    header: jwt-token
    encryptJWTKey: U0JBUElKV1RkV2FuZzkyNjQ1NA==
    # AccessToken过期时间-5分钟-5*60(秒为单位)
    accessTokenExpireTime: 300
    # RefreshToken过期时间-30分钟-30*60(秒为单位)
    refreshTokenExpireTime: 1800
    # Shiro缓存过期时间-5分钟-5*60(秒为单位)(一般设置与AccessToken过期时间一致)
    shiroCacheExpireTime: 300
  # 不需要鉴权的路径
  ignores:
    - "/"
    - "/notice/**"
    - "/excel/**"
    - "/file/**"
    - "/pdf/**"
    - "/user-demo/**"
    - "/quartz/**"
    - "/test/**"
    - "/cloud/**"
    - "/rocket-mq/**"
    - "/activeMq/**"
    - "/kaptcha/**"
    - "/activiti/**"
    - "/openOffice/**"
    - "/auth/register"
    - "/auth/login"
    - "/auth/logout"
    - "/api/**"
    - "/resources/**"
    - "/templates/**"
    - "/websocket.html"
    - "/error.html"
    - "/kaptcha.html"
    - "/imgs/**"
    - "*.css"
    - "*.js"
    - "*.gif"
    - "*.jpg"
    - "*.png"
    - "*.ico"
    - "/favicon.ico"
    - "/druid/**"
    - "/public/**"
    - "/swagger-ui.html"
    - "/doc.html"
    - "/swagger-resources/**"
    - "/service-worker.js"
    - "/v2/**"
    - "/webjars/**"